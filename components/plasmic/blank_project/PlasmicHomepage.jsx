// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4wuR6djweT7vAchr7evKHM
// Component: gMJdaty2uR
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsniCroJ2MX1 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Ni-CroJ2mX1/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 4wuR6djweT7vAchr7evKHM/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: gMJdaty2uR/css

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsniCroJ2MX1()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"section1"}
            data-plasmic-override={overrides.section1}
            className={classNames(projectcss.all, sty.section1)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"column1"}
              data-plasmic-override={overrides.column1}
              hasGap={true}
              className={classNames(projectcss.all, sty.column1)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Une expertise numérique dédiée aux entreprises de services"
                  : "Une expertise numérique dédiée aux entreprises de services"}
              </h1>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xyoZo
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Lorem ipsum dolor sit amet, consectetur adipiscing elit. \n\nQuisque malesuada hendrerit elit, ut placerat neque tempus non. Phasellus bibendum tortor est."
                  : "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque malesuada hendrerit elit, ut placerat neque tempus non. Phasellus bibendum tortor est."}
              </div>

              <button
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  projectcss.__wab_text,
                  sty.button___2JnHo
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF" }}
                    >
                      {"En savoir plus"}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF" }}
                    >
                      {"En savoir plus"}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                )}
              </button>
            </p.Stack>

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                data-plasmic-name={"column2"}
                data-plasmic-override={overrides.column2}
                className={classNames(projectcss.all, sty.column2)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__np82R)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_project/images/image.png",
                    fullWidth: 1956,
                    fullHeight: 1434,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}
          </div>

          <div
            data-plasmic-name={"section2"}
            data-plasmic-override={overrides.section2}
            className={classNames(projectcss.all, sty.section2)}
          >
            <div
              data-plasmic-name={"column4"}
              data-plasmic-override={overrides.column4}
              className={classNames(projectcss.all, sty.column4)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__htHu3)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/blank_project/images/image2.png",
                  fullWidth: 1608,
                  fullHeight: 1060,
                  aspectRatio: undefined
                }}
              />
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"column3"}
              data-plasmic-override={overrides.column3}
              hasGap={true}
              className={classNames(projectcss.all, sty.column3)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__iLkWy
                )}
              >
                {"La meilleure expérience de transformation numérique"}
              </h2>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jMPxg
                )}
              >
                {
                  "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque malesuada hendrerit elit, ut placerat neque tempus non. Phasellus bibendum tortor est."
                }
              </div>

              <button
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  projectcss.__wab_text,
                  sty.button__aM5Ic
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFFFF" }}
                  >
                    {"Découvrir nos services"}
                  </span>
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </button>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"section3"}
            data-plasmic-override={overrides.section3}
            className={classNames(projectcss.all, sty.section3)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"column6"}
              data-plasmic-override={overrides.column6}
              hasGap={true}
              className={classNames(projectcss.all, sty.column6)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__yyAfJ
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Êtes-vous en pénurie de main d'oeuvre ?"
                      : "Etes-vous en pénurie de main d'oeuvre ?"}
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ydF5T
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque malesuada hendrerit elit, ut placerat neque tempus non. Phasellus bibendum tortor est."
                    }
                  </div>

                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__snkuo
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FFFFFF" }}
                        >
                          {"Demander une démo"}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FFFFFF" }}
                        >
                          {"Demander une démo"}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    )}
                  </button>
                </p.Stack>
              ) : null}
            </p.Stack>

            <div
              data-plasmic-name={"column5"}
              data-plasmic-override={overrides.column5}
              className={classNames(projectcss.all, sty.column5)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__htIim)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/blank_project/images/image3.png",
                  fullWidth: 1732,
                  fullHeight: 2834,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section1",
    "column1",
    "h1",
    "column2",
    "section2",
    "column4",
    "column3",
    "section3",
    "column6",
    "freeBox",
    "column5"
  ],

  section1: ["section1", "column1", "h1", "column2"],
  column1: ["column1", "h1"],
  h1: ["h1"],
  column2: ["column2"],
  section2: ["section2", "column4", "column3"],
  column4: ["column4"],
  column3: ["column3"],
  section3: ["section3", "column6", "freeBox", "column5"],
  column6: ["column6", "freeBox"],
  freeBox: ["freeBox"],
  column5: ["column5"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section1: makeNodeComponent("section1"),
    column1: makeNodeComponent("column1"),
    h1: makeNodeComponent("h1"),
    column2: makeNodeComponent("column2"),
    section2: makeNodeComponent("section2"),
    column4: makeNodeComponent("column4"),
    column3: makeNodeComponent("column3"),
    section3: makeNodeComponent("section3"),
    column6: makeNodeComponent("column6"),
    freeBox: makeNodeComponent("freeBox"),
    column5: makeNodeComponent("column5"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
