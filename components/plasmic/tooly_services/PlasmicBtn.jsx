// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4wuR6djweT7vAchr7evKHM
// Component: gIUt2Bx9WL
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsniCroJ2MX1 } from "../blank_project/PlasmicGlobalVariant__Screen"; // plasmic-import: Ni-CroJ2mX1/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: 4wuR6djweT7vAchr7evKHM/projectcss
import sty from "./PlasmicBtn.module.css"; // plasmic-import: gIUt2Bx9WL/css

export const PlasmicBtn__VariantProps = new Array("type", "size");

export const PlasmicBtn__ArgProps = new Array("children");

function PlasmicBtn__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsniCroJ2MX1()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootsize__2]: hasVariant(variants, "size", "_2"),
          [sty.roottype_primary]: hasVariant(variants, "type", "primary"),
          [sty.roottype_secondary]: hasVariant(variants, "type", "secondary"),
          [sty.roottype_tertiary]: hasVariant(variants, "type", "tertiary")
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxtype_primary]: hasVariant(variants, "type", "primary"),
          [sty.freeBoxtype_tertiary]: hasVariant(variants, "type", "tertiary")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "label",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrensize__2]: hasVariant(variants, "size", "_2"),
            [sty.slotTargetChildrentype_primary]: hasVariant(
              variants,
              "type",
              "primary"
            ),

            [sty.slotTargetChildrentype_secondary]: hasVariant(
              variants,
              "type",
              "secondary"
            ),

            [sty.slotTargetChildrentype_tertiary]: hasVariant(
              variants,
              "type",
              "tertiary"
            )
          })
        })}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBtn__ArgProps,
      internalVariantPropNames: PlasmicBtn__VariantProps
    });

    return PlasmicBtn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBtn";
  } else {
    func.displayName = `PlasmicBtn.${nodeName}`;
  }
  return func;
}

export const PlasmicBtn = Object.assign(
  // Top-level PlasmicBtn renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicBtn
    internalVariantProps: PlasmicBtn__VariantProps,
    internalArgProps: PlasmicBtn__ArgProps
  }
);

export default PlasmicBtn;
/* prettier-ignore-end */
